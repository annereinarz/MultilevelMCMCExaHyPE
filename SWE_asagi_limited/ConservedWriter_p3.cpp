// This file was generated by the ExaHyPE toolkit.
// It will not be overwritten.
//
//
// ========================
//   www.exahype.eu
// ========================
#include "ConservedWriter_p3.h"

SWE::ConservedWriter_p3::ConservedWriter_p3(SWE::MySWESolver_p3& solver) {
  // @TODO Please insert your code here.
}

SWE::ConservedWriter_p3::~ConservedWriter_p3() {
}

void SWE::ConservedWriter_p3::startPlotting( double time) {
  // @TODO Please insert your code here.
}


void SWE::ConservedWriter_p3::finishPlotting() {
  // @TODO Please insert your code here.
}

void SWE::ConservedWriter_p3::mapQuantities(
    const tarch::la::Vector<DIMENSIONS, double>& offsetOfPatch,
    const tarch::la::Vector<DIMENSIONS, double>& sizeOfPatch,
    const tarch::la::Vector<DIMENSIONS, double>& x,
    const tarch::la::Vector<DIMENSIONS, int>&    pos,
    double* const Q,
    double* const outputQuantities,
    double timeStamp
) {
  const int writtenUnknowns = 5;
        for (int i=0; i<4; i++){ 
                outputQuantities[i] = 0.0;
                if(std::isfinite(Q[i]) && !std::isnan(Q[i]))
                        outputQuantities[i] = Q[i];
        }
        if(Q[3] < 0.0){
                outputQuantities[4] = 0.0;
                if(std::isfinite(Q[0]+Q[3]) && !std::isnan(Q[0]+Q[3]))
                        outputQuantities[4] = Q[0] + Q[3];
        }
        //}
}
